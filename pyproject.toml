[project]
name = "nonebot-plugin-bilichat"

version = "5.13.4"

description = "全功能的 bilibili 内容解析器及订阅器"
authors = [
    { name = "djkcyl", email = "cyl@cyllive.cn" },
    { name = "Well404", email = "well_404@outlook.com" },
]
dependencies = [
    "nonebot-plugin-localstore>=0.7.3",
    "nonebot2[fastapi,websockets]",
    "httpx>=0.28.1",
    "nonebot-plugin-apscheduler>=0.5.0",
    "python-multipart>=0.0.20",
    "nonebot-plugin-alconna>=0.54.1",
    "nonebot-plugin-waiter>=0.8.0",
    "nonebot-plugin-sentry>=2.0.0",
    "packaging>=24.2",
    "pydantic>=2.10.4",
    "nonebot-plugin-uninfo>=0.6.2",
    "pyyaml>=6.0.2",
]
requires-python = ">=3.10,<4.0"
readme = "README.md"
license = { text = "AGPL3.0" }
[project.optional-dependencies]
extra = []

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.ruff]
line-length = 120
target-version = "py310"
exclude = ["tests/"]

[tool.ruff.lint]
select = [
    # https://beta.ruff.rs/docs/rules
    'F',   # pyflakes
    'E',   # pycodestyle (Error)
    'W',   # pycodestyle (Warning)
    'C90', # mccabe
    'I',   # isort
    'N',   # pep8-naming
    # 'D',     # pydocstyle
    'UP',    # pyupgrade
    'YTT',   # flake8-2020
    'ANN',   # flake8-annotations
    'ASYNC', # flake8-async
    'S',     # flake8-bandit
    'BLE',   # flake8-blind-except
    'FBT',   # flake8-boolean-trap
    'B',     # flake8-bugbear
    'A',     # flake8-builtins
    'COM',   # flake8-commas
    # 'CPY',   # flake8-copyright
    'C4',  # flake8-comprehensions
    'DTZ', # flake8-datetimez
    'T10', # flake8-debugger
    'DJ',  # flake8-django
    # 'EM',    # flake8-errmsg
    'EXE', # flake8-executable
    'FA',  # flake8-future-annotations
    'ISC', # flake8-implicit-str-concat
    'ICN', # flake8-import-conventions
    'LOG', # flake8-logging
    'G',   # flake8-logging-format
    'INP', # flake8-no-pep420
    'PIE', # flake8-pie
    'T20', # flake8-print
    'PYI', # flake8-pyi
    'PT',  # flake8-pytest-style
    'Q',   # flake8-quotes
    'RSE', # flake8-raise
    # 'RET',  # flake8-return
    'SLF',  # flake8-self
    'SLOT', # flake8-slots
    'SIM',  # flake8-simplify
    'TID',  # flake8-tidy-imports
    'TC',   # flake8-type-checking
    'INT',  # flake8-gettext
    'ARG',  # flake8-unused-arguments
    'PTH',  # flake8-use-pathlib
    # 'TD',   # flake8-todos
    'FIX',  # flake8-fixme
    'ERA',  # eradicate
    'PD',   # pandas-vet
    'PGH',  # pygrep-hooks
    'PL',   # Pylint (Convention)
    'TRY',  # tryceratops
    'FLY',  # flynt
    'NPY',  # NumPy-specific rules
    'FAST', # FastAPI
    'AIR',  # Airflow
    'PERF', # Perflint
    'FURB', # refurb
    # 'DOC',   # pydoclint
    'RUF', # Ruff-specific rules
]
ignore = [
    "ERA001",   # 注释的代码以后可能还要用
    "COM812",   # 我想手动控制格式化换行
    "ISC001",   # 用空格给字符串无痛换行很好用
    "ANN201",   # 我都用 pylance 了, 用得着写 function return 类型吗
    "INP001",   # tests 文件夹也要 __init__.py, 你是不是有病
    "PLR2004",  # 我就喜欢写死数字, 嘻嘻
    "BLE001",   # except Exception 怎么你了
    "TRY003",   # 抛出个 Error 而已, 用得着单开一个变量存 msg 吗
    "F841",     # pylance 会告诉我的这个变量没有使用, 不需要你提醒
    "N815",     # API 返回的就是驼峰, 我能怎么办嘛
    "S324",     # 你妈的, 又不是我要用 md5
    "PLR0913",  # 你怎么不去骂 httpx.get, 人家十几个参数
    "S311",     # 我不需要这么高的随机数安全性
    "S501",     # 关闭 ssl 校验, 提高代码效率
    "E501",     # 太长的代码会被格式化换行, 不能换行的你提醒我了也没用啊
    "SLF001",   # 我在我自己的程序里用我自己的私有方法也不行是吧
    "PLR0912",  # 呜呜呜别骂了别骂了, 我也不知道怎么优化分支了
    "PLR0915",  # 同上
    "C901",     # 同上
    "PGH003",   # 我就喜欢用 type ignore, 你能怎么办
    "S101",     # 我就喜欢用 assert, 你能怎么办
    "ANN002",   # args 为啥必须加 typing
    "ANN003",   # kwargs 同上
    "TRY301",   # 我爱在哪 raise 就在哪 raise
    "ASYNC110", # anyio.Event 写起来太麻烦了
    "B008",     # 依赖注入没用过？
]

[dependency-groups]
dev = [
    "nonebot-adapter-onebot>=2.4.6",
    "nonebot-adapter-mirai2>=0.0.22",
    "nonebot-adapter-qq>=1.6.0",
    "nonebot-adapter-satori>=0.13.1",
]
